
/* —оздать консольное приложени€, удовлетвор€ющее следующим требовани€м:
 -  орректно спроектируйте и реализуйте предметную область задачи.
 - ƒл€ создани€ объектов из иерархии классов продумайте возможность
   использовани€ порождающих шаблонов проектировани€.
 - –еализуйте проверку данных, вводимых пользователем, но не на стороне
   клиента.
 - дл€ проверки корректности переданных данных можно применить регул€рные
   выражени€.
 - ћеню выбора действи€ пользователем можно не реализовывать, используйте
   заглушку.
 - ќсобое условие: переопределите, где необходимо, методы toString(),
   equals() и hashCode().
   
¬ариант ј. ÷веточна€ композици€. –еализуйте приложение, позвол€ющее 
создавать цветочные композиции (объект, представл€ющий собой цветочную
композицию). —оставл€ющими цветочной композиции €вл€ютс€ цветы и упаковка.

¬ариант ¬. ѕодарки. –еализовать приложени€, позвол€ющее создавать подарки
(объект, представл€ющий собой подарок). —оставл€ющими целого подарка €вл€ютс€
сладости и упаковка. */

import bean.*;

public class Main {

	public static void main(String[] args) {

		Candy candy1 = new Candy("шоколадный батончик \"Snickers\"", 6);
		Candy candy2 = new Candy("шоколад \"јлЄнка\"", 10);
		Candy candy3 = new Candy("конфеты \"Raffaello\"", 20);

		Pack pack = new Pack("картонна€ коробка в бумажной обЄртке", 11);

		Gift gift1 = new Gift(pack);
		gift1.add_candy(candy1);
		gift1.add_candy(candy1);
		gift1.add_candy(candy1);
		gift1.add_candy(candy2);
		gift1.add_candy(candy2);
		gift1.add_candy(candy3);

		System.out.println(gift1.get_pack().toString());
		for (int i = 0; i < gift1.get_gift_content().size(); i++) {
			System.out.println(gift1.get_gift_content().get(i).toString());
		}
		System.out.println("»того: " + gift1.get_total_cost() + " у.е.");

	}

}
